openapi: 3.0.0
info:
  title: Products service
  version: 0.0.0
tags: []
paths:
  /api/products:
    get:
      operationId: getProducts
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/ProductDetailsResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
    post:
      operationId: createProduct
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ProductDetailsResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                createProductReq:
                  $ref: '#/components/schemas/CreateProductRequest'
              required:
                - createProductReq
  /api/products/{product_id}:
    get:
      operationId: getProductById
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ProductDetailsResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
    put:
      operationId: updateProductById
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ProductDetailsResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updateProductReq:
                  $ref: '#/components/schemas/UpdateProductRequest'
              required:
                - updateProductReq
    delete:
      operationId: deleteProductById
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
  /api/products/{product_id}/attachement:
    post:
      operationId: uploadProductAttachment
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/UploadProductImgResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: object
              properties:
                uploadProductImgReq:
                  $ref: '#/components/schemas/UploadProductImgRequest'
              required:
                - uploadProductImgReq
          image/jpg:
            schema:
              type: object
              properties:
                uploadProductImgReq:
                  $ref: '#/components/schemas/UploadProductImgRequest'
              required:
                - uploadProductImgReq
          image/png:
            schema:
              type: object
              properties:
                uploadProductImgReq:
                  $ref: '#/components/schemas/UploadProductImgRequest'
              required:
                - uploadProductImgReq
  /api/products/{product_id}/attachement/{attachement_id}:
    get:
      operationId: getProductAttachmentById
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
        - name: attachement_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            image/jpeg:
              schema:
                $ref: '#/components/schemas/GetProductImgResponse'
            image/jpg:
              schema:
                $ref: '#/components/schemas/GetProductImgResponse'
            image/png:
              schema:
                $ref: '#/components/schemas/GetProductImgResponse'
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/NotFoundError'
                  - $ref: '#/components/schemas/InvalidRequestError'
  /api/products/{product_id}/attachements/{attachement_id}:
    delete:
      operationId: deleteProductAttachmentById
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
        - name: attachement_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
                  - $ref: '#/components/schemas/NotFoundError'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
  /api/products/{product_id}/questions:
    get:
      operationId: getProductQuestions
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/QuestionResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/NotFoundError'
    post:
      operationId: postProductQuestion
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/QuestionResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
                  - $ref: '#/components/schemas/NotFoundError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
  /api/products/{product_id}/questions/{question_id}/respond:
    post:
      operationId: postQuestionAnswer
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AnswerToQuestionResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/UnauthorizedError'
                  - $ref: '#/components/schemas/NotFoundError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postAnswerReq:
                  $ref: '#/components/schemas/AnswerToQuestionRequest'
              required:
                - postAnswerReq
  /api/products/{product_id}/reviews:
    get:
      operationId: getProductReviews
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/ReviewResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/NotFoundError'
    post:
      operationId: postProductReview
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ReviewResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/NotFoundError'
                  - $ref: '#/components/schemas/UnauthorizedError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
  /api/products/{product_id}/reviews/{review_id}/respond:
    post:
      operationId: respondToReview
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
        - name: review_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AnswerToReviewResponse'
                  - $ref: '#/components/schemas/InvalidRequestError'
                  - $ref: '#/components/schemas/NotFoundError'
                  - $ref: '#/components/schemas/UnauthorizedError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerToReviewRequest'
components:
  schemas:
    AnswerToQuestionRequest:
      type: object
      required:
        - username
        - answer
      properties:
        username:
          type: string
        answer:
          type: string
    AnswerToQuestionResponse:
      type: object
      required:
        - answerId
        - dateTime
      properties:
        answerId:
          type: integer
          format: int64
        dateTime:
          $ref: '#/components/schemas/DateTimeKnownEncoding'
      allOf:
        - $ref: '#/components/schemas/AnswerToQuestionRequest'
    AnswerToReviewRequest:
      type: object
      required:
        - username
        - answer
      properties:
        username:
          type: string
        answer:
          type: string
    AnswerToReviewResponse:
      type: object
      required:
        - answerId
        - dateTime
      properties:
        answerId:
          type: integer
          format: int64
        dateTime:
          $ref: '#/components/schemas/DateTimeKnownEncoding'
      allOf:
        - $ref: '#/components/schemas/AnswerToReviewRequest'
    CreateProductRequest:
      type: object
      required:
        - productName
        - productPrice
        - productCategory
        - productQuantity
      properties:
        productName:
          type: string
        productPrice:
          type: number
        productCategory:
          type: string
        productQuantity:
          type: integer
        productDescription:
          type: string
        productMaterial:
          type: string
        productWeight:
          type: number
          format: decimal
        productWidth:
          type: number
          format: decimal
        productLenght:
          type: number
          format: decimal
        productHeight:
          type: number
          format: decimal
    DateTimeKnownEncoding:
      type: string
      enum:
        - rfc3339
        - rfc7231
        - unixTimestamp
      description: Known encoding to use on utcDateTime or offsetDateTime
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    GetContactResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    GetDeliveryResponse:
      type: object
      required:
        - handlingTime
        - shippingRates
        - additionalInfo
        - shipmentDate
      properties:
        handlingTime:
          type: string
        shippingRates:
          $ref: '#/components/schemas/ShippingRates'
        additionalInfo:
          type: string
        shipmentDate:
          type: string
          format: date-time
    GetLocationResponse:
      type: object
      required:
        - id
        - city
        - country
        - postCode
        - province
      properties:
        id:
          type: string
        city:
          type: string
        country:
          type: string
        postCode:
          type: string
        province:
          type: string
    GetProductImgResponse:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          format: byte
    GetPublicationResponse:
      type: object
      required:
        - duration
        - endAt
        - startAt
        - status
        - republish
        - endedBy
      properties:
        duration:
          type: string
        endAt:
          type: string
          format: date-time
        startAt:
          type: string
          format: date-time
        status:
          type: string
        republish:
          type: boolean
        endedBy:
          type: string
    GetSaleAfterServiceResponse:
      type: object
      required:
        - warranty
        - returnPolicy
        - userWarranty
      properties:
        warranty:
          $ref: '#/components/schemas/WarrantyResponse'
        returnPolicy:
          $ref: '#/components/schemas/ReturnPolicyResponse'
        userWarranty:
          $ref: '#/components/schemas/UserWarrantyResponse'
    GetStockResponse:
      type: object
      required:
        - avaiable
        - unit
      properties:
        avaiable:
          type: integer
          format: int32
        unit:
          type: string
    GetTaxResponse:
      type: object
      required:
        - rates
      properties:
        rates:
          $ref: '#/components/schemas/RatesResponse'
    GetValidationResponse:
      type: object
      required:
        - error
        - warnings
        - validationDate
      properties:
        error:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
        validationDate:
          type: string
          format: date-time
    InvalidRequestError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 400
        message:
          type: string
          enum:
            - Invalid Request
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 404
        message:
          type: string
          enum:
            - Not Found
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
    ProductDetailsResponse:
      type: object
      required:
        - id
        - category
        - attachments
        - delivery
        - publication
        - language
        - validation
        - saleAfterService
        - stock
        - contact
        - locations
        - tax
      properties:
        id:
          type: string
        category:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/GetProductImgResponse'
        delivery:
          $ref: '#/components/schemas/GetDeliveryResponse'
        publication:
          $ref: '#/components/schemas/GetPublicationResponse'
        language:
          type: string
        validation:
          $ref: '#/components/schemas/GetValidationResponse'
        saleAfterService:
          $ref: '#/components/schemas/GetSaleAfterServiceResponse'
        stock:
          $ref: '#/components/schemas/GetStockResponse'
        contact:
          $ref: '#/components/schemas/GetContactResponse'
        locations:
          $ref: '#/components/schemas/GetLocationResponse'
        tax:
          $ref: '#/components/schemas/GetTaxResponse'
    QuestionRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
    QuestionResponse:
      type: object
      required:
        - questionId
        - username
        - question
        - dateTime
      properties:
        questionId:
          type: integer
          format: int64
        username:
          type: string
        question:
          type: string
        dateTime:
          $ref: '#/components/schemas/DateTimeKnownEncoding'
    RatesResponse:
      type: object
      required:
        - rate
        - country
        - province
      properties:
        rate:
          type: number
          format: float
        country:
          type: string
        province:
          type: string
    ReturnPolicyResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    ReviewRequest:
      type: object
      required:
        - rate
      properties:
        rate:
          type: number
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        comment:
          type: string
    ReviewResponse:
      type: object
      required:
        - reviewId
        - username
        - dateTime
      properties:
        reviewId:
          type: integer
          format: int16
        username:
          type: string
        dateTime:
          $ref: '#/components/schemas/DateTimeKnownEncoding'
      allOf:
        - $ref: '#/components/schemas/ReviewRequest'
    ShippingRates:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    UnauthorizedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          enum:
            - 401
        message:
          type: string
          enum:
            - Unauthorized
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
    UpdateProductRequest:
      type: object
      properties:
        productName:
          type: string
        productDescription:
          type: string
        productPrice:
          type: number
        productCategory:
          type: string
        productQuantity:
          type: integer
        stockQuantity:
          type: integer
          format: int32
    UploadProductImgRequest:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          format: byte
    UploadProductImgResponse:
      type: object
      required:
        - success
        - attachementId
      properties:
        success:
          type: boolean
        attachementId:
          type: string
    UserWarrantyResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    WarrantyResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
